#!/usr/bin/env escript
%%! -smp +A 10
-mode(compile).
-compile(nowarn_unused_vars).

-on_load(on_load/0).

on_load() ->
    Ebin = filename:join(filename:dirname(code:which(?MODULE)), "ebin"),
    true = code:add_pathz(Ebin),
    ok.

gre(Subject, RE, Replacement) -> re:replace(Subject, RE, Replacement, [global]).

fw(Fmt) -> fw(Fmt, []).
fw(Fmt, Args) -> io:format(Fmt ++ "~n", Args).

lineno() ->
    put(lineno, (case get(lineno) of
		     undefined -> put(lineno, 1), 1;
		     LineNo -> LineNo
		 end) + 1).

maybe_open_block() ->
    case get(in_code) of
	true -> ok;
	_ -> fw("~n```"), put(in_code, true)
    end.

close_block() ->
    case get(in_code) of
	true -> fw("```"), put(in_code, false);
	_ -> ok
    end.

-define(e(Cap, Cmd), Cap = ?e(Cap = Cmd)).
-define(e(Cmd), fun() ->
			Result = Cmd,
			maybe_open_block(),
			fw("~p> ~s.~n~p",
			   [lineno(), gre(??Cmd, " ", ""), Result]),
			Result
		end()).

-define(d(Txt), close_block(), fw("~s~n", [Txt])).

main(_) ->
    ?d("# cutkey"),
    ?d("**License: Apache 2**"),
    ?d("cutkey is an Erlang app for generating RSA keys. It is implemented "
       "as a port driver that calls [OpenSSL's RSA_generate_key]"
       "(http://www.openssl.org/docs/crypto/RSA_generate_key.html) on a thread "
       "from the async pool."),
    ?d("### Prerequistes"),
    ?d("* OpenSSL\n* [rebar](https://github.com/basho/rebar) - builds with "
       "`rebar compile`"),
    ?d("### Example use"),
    ?e(ok, application:start(cutkey)),
    ?d("`cutkey:rsa(Bits,E)` returns a key as a list of binary mpints "
       "(multi-precision integers) in `[E,N,D]` form."),
    ?e({ok, PrivateKey}, cutkey:rsa(256, 257)),
    ?d("This format can be used directly with the [crypto apps RSA]"
       "(http://erlang.org/doc/man/crypto.html#rsa_sign-2) functions:"),
    ?e(CipherText, crypto:rsa_private_encrypt(<<"cutkey">>, PrivateKey,
					      rsa_pkcs1_padding)),
    ?e(PublicKey, lists:sublist(PrivateKey,2)),
    ?e(crypto:rsa_public_decrypt(CipherText, PublicKey, rsa_pkcs1_padding)),
    ?d("To return integers rather than mpints call `cutkey:rsa(Bits,E,"
       "[erlint])`."),
    ?e(cutkey:rsa(256, 257, [erlint])),
    ?d("`cutkey:rsa(Bits, E,[{return,full}]` returns all the keys component as "
       "`[E,N,D,P,Q,DMP1,DMQ1,IQMP]`."),
    ?e(cutkey:rsa(256, 257, [{return,full}])),
    ?e(cutkey:rsa(256, 257, [{return,full},erlint])),
    ?d("An `#'RSAPrivateKey'{}` for use with the [public_key]"
       "(http://erlang.org/doc/man/public_key.html) app can be "
       "generated by calling `cutkey:rsa(Bits,E,[{return,key}])`."),
    ?e(cutkey:rsa(256, 257, [{return, key}])).
